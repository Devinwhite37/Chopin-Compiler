var TSC;
(function (TSC) {
    var Production;
    (function (Production) {
        Production["Program"] = "Program";
        Production["Block"] = "Block";
        Production["Expr"] = "Expression";
        Production["Stmt"] = "Statement";
        Production["StmtList"] = "StatementList";
        Production["AssignStmt"] = "AssignmentStatement";
        Production["PrintStmt"] = "PrintStatement";
        Production["WhileStmt"] = "WhileStatement";
        Production["VarDecl"] = "VarDecl";
        Production["IfStmt"] = "IfStatement";
        Production["BooleanExpr"] = "BooleanExpression";
        Production["IntExpr"] = "IntegerExpression";
        Production["StringExpr"] = "StringExpression";
        Production["CharList"] = "CharList";
        Production["Id"] = "Id";
        Production["BoolVal"] = "BoolVal";
        Production["Type"] = "Type";
        Production["Char"] = "Char";
        Production["Digit"] = "Digit";
        Production["IntOp"] = "IntOp";
        Production["BoolOp"] = "BoolOp";
        Production["Space"] = "Space";
        Production["Addition"] = "Addition";
    })(Production = TSC.Production || (TSC.Production = {}));
    var Parser = /** @class */ (function () {
        // Constructor for parser, passed tokens from lexer. Inits values.
        function Parser(tokens) {
            this.tokenList = tokens;
            // Set current token to the first token in the list
            this.currentToken = 0;
            // Holds log messages generated by parser
            this.parseOutput = [];
            // Flag for parser error
            this.error = false;
            this.i = 0;
            // Tree data structure
            //this.cst = new Tree();
        }
        Parser.prototype.parse = function () {
            console.log("tokenList: ");
            console.log(tokens);
            for (var i = 0; i < tokens.length; i++) {
                if (tokens[i][1] == '{') {
                    this.parseOutput.push("VALID - Expecting [Program], found [Block]");
                    this.i++;
                }
                else if (tokens[i][1] != '{') {
                    this.parseOutput.push("ERROR - Expecting [Block], found [" + tokens[i][1] + " ]");
                }
                return this.parseOutput;
            }
        };
        Parser.prototype.parseBlock = function () {
            for (var i = 0; i < tokens.length; i++) {
                if (tokens[i][1] == '}') {
                    this.parseOutput.push("VALID - Expecting [Program], found");
                    this.i++;
                }
                return this.parseOutput;
            }
        };
        return Parser;
    }());
    TSC.Parser = Parser;
})(TSC || (TSC = {}));
