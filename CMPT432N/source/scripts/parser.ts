

module TSC {
    export enum Production {
        Program = "Program",
        Block = "Block",
        Expr = "Expression",
        Stmt = "Statement",
        StmtList = "StatementList",
        AssignStmt = "AssignmentStatement",
        PrintStmt = "PrintStatement",
        WhileStmt = "WhileStatement",
        VarDecl = "VarDecl",
        IfStmt = "IfStatement",
        BooleanExpr = "BooleanExpression",
        IntExpr = "IntegerExpression",
        StringExpr = "StringExpression",
        CharList = "CharList",
        Id = "Id",
        BoolVal = "BoolVal",
        Type = "Type",
        Char = "Char",
        Digit = "Digit",
        IntOp = "IntOp",
        BoolOp = "BoolOp",
        Space = "Space",
        Addition = "Addition"
    }
        export class Parser {
            currentToken: number; 
            tokenList: Array<Lexer>; 
            parseOutput: Array<String>; 
            error: boolean; 
            i: number;

            // Constructor for parser, passed tokens from lexer. Inits values.
            constructor(tokens){
                this.tokenList = tokens;
                //tokens = this.tokenList;
                // Set current token to the first token in the list
                //this.currentToken = 0;
                // Holds log messages generated by parser
                this.parseOutput = [];
                // Flag for parser error
                this.error = false;
                this.currentToken = 0;
                // Tree data structure
                //this.cst = new Tree();

            }
            public parse() { 
                if(tokens[this.currentToken][1] == '{'){
                    this.parseBlock();
                }
                else{
                    this.parseOutput.push("ERROR - Expecting [{] found [" + tokens[this.currentToken][1] + "] on [ " + tokens[this.currentToken][2] + " , " + tokens[this.currentToken][3] + " ]");
                }
                //this.statementList();
                return this.parseOutput;
            }

            /*public parseBlock() {
                //if(tokens[this.currentToken][1]!=""){
                    this.parseOutput.push("Block");
                    for(this.currentToken = this.currentToken; this.currentToken < tokens.length; this.currentToken++){
                        if(tokens[this.currentToken][1] == '{'){
                            this.parseOutput.push("VALID - Expecting [L_BRACE], found [{] on [ " + tokens[this.currentToken][2] + " , " + tokens[this.currentToken][3] + " ]");
                            this.currentToken++;
                            this.statementList();
                            if(tokens[this.currentToken][1] == '}'){
                                this.parseOutput.push("VALID - Expecting [R_BRACE], found [}] on [ " + tokens[this.currentToken][2] + " , " + tokens[this.currentToken][3] + " ]");
                                this.currentToken++;
                                if(tokens[this.currentToken][1] == '$'){
                                    this.parseOutput.push("VALID - Expecting [EOP], found [$] on [ " + tokens[this.currentToken][2] + " , " + tokens[this.currentToken][3] + " ]");
                                }
                                else if(tokens[this.currentToken][0] != '$'){
                                    this.parseOutput.push("ERROR - Expecting [EOP]");
                                    break;
                                }
                            }
                            else if(tokens[this.currentToken][1] != '}'){
                                this.parseOutput.push("ERROR - Expecting [}]");
                                break;
                            }
                        }
                        else if(tokens[this.currentToken][1] != '{'){
                            this.parseOutput.push("ERROR - Expecting [{]");
                            break;
                        }
                    }  
                }*/
                //else{}
            //}
            public parseBlock(){
                this.parseOutput.push("Block");
                if(tokens[this.currentToken][1] == '{'){
                    this.parseOutput.push("VALID - Found [L_BRACE] on [ " + tokens[this.currentToken][2] + " , " + tokens[this.currentToken][3] + " ]");
                    this.currentToken++;
                    this.statementList();
                }
                else if(tokens[this.currentToken][1] == '}'){
                    this.parseOutput.push("VALID - Found [R_BRACE] on [ " + tokens[this.currentToken][2] + " , " + tokens[this.currentToken][3] + " ]");
                    this.currentToken++;
                    if(tokens[this.currentToken][1] == '$'){
                        this.parseOutput.push("VALID - Found [EOP] on [ " + tokens[this.currentToken][2] + " , " + tokens[this.currentToken][3] + " ]");
                        this.currentToken++;
                    }
                    else{
                        this.statementList();
                    }
                }
                else{
                    this.parseOutput.push("ERROR - Found [" + tokens[this.currentToken][1] + "] on [ " + tokens[this.currentToken][2] + " , " + tokens[this.currentToken][3] + " ]")
                }
            }
            public statementList(){
                this.parseOutput.push("StatementList");
                    if (tokens[this.currentToken][1] == '}') {
                        this.parseBlock();
                    }
                    else if (tokens[this.currentToken][0] == 'PRINT' || tokens[this.currentToken][0] == "VARIABLE"
                        || tokens[this.currentToken][0] == "INT_TYPE" || tokens[this.currentToken][0] == "STRING_TYPE"
                        || tokens[this.currentToken][0] == "BOOL_TYPE" || tokens[this.currentToken][0] == "WHILE"
                        || tokens[this.currentToken][0] == "IF" || tokens[this.currentToken][0] == "L_BRACE") {
                        //goes to statement
                        console.log("statement elif ran");
                        this.statement();
                        //if the current token is EOP then loop here
                        /*while (tokens[this.currentToken][0] != "EOP") {
                            //calls self
                            this.statementList();
                        }*/
                    
                    if(tokens[this.currentToken][1] == '}'){
                        //this.currentToken++;
                        console.log("epsilon");
                        this.parseOutput.push("VALID - Found Îµ on [ " + tokens[this.currentToken][2] + " , " + tokens[this.currentToken][3] + " ]");
                        //this.parseBlock();
                        this.parseBlock();
                    }
                    else if(tokens[this.currentToken][1] =='{'){
                        this.parseBlock();
                    }
                    /*else if(tokens[this.currentToken][1] == "undefined"){
                        console.log("undefined ran")
                        break;
                    }*/

                    //else if(tokens[this.currentToken][2] == '')
            //}
                    }
            }
            public statement(){
                this.parseOutput.push("Statement");
                if(tokens[this.currentToken][0] == 'PRINT'){
                    this.printStatement();
                }
                else if(tokens[this.currentToken][0] == 'VARIABLE'){
                    console.log("Assignment Ran");
                    this.assignmentStatement();
                }
            }
            public printStatement(){
                this.parseOutput.push("PrintStatement");
                console.log("PRINT STATMENT RAN")
                //for(this.currentToken = this.currentToken; this.currentToken < tokens.length; this.currentToken++){
                    if(tokens[this.currentToken][0] == 'PRINT'){
                        this.currentToken++;
                        console.log("token: " + tokens[this.currentToken][1]);
                        console.log("token: " + tokens[this.currentToken][0]);
                        this.parseOutput.push("VALID - Found [PRINT] on [ " + tokens[this.currentToken][2] + " , " + tokens[this.currentToken][3] + " ]");
                        if(tokens[this.currentToken][1] == '('){
                            this.parseOutput.push("VALID - Found [L_PAREN] on [ " + tokens[this.currentToken][2] + " , " + tokens[this.currentToken][3] + " ]");
                            return;
                        }
                    }
                    /*else if(tokens[this.currentToken][0] == 'missingEOP'){
                    }*/
                    /*else if(tokens[this.currentToken][1] == '('){
                        this.parseOutput.push("VALID - Expecting [R_PAREN], found [(]");
                    }
                    else if(tokens[this.currentToken][1] != '('){
                        this.parseOutput.push("ERROR - Expecting [R_PAREN], found ["+ tokens[this.currentToken][0]+"]");
                    }
                    else if(tokens[this.currentToken][0] == 'DIGIT' || 'VARIABLE'){
                        this.parseOutput.push("VALID - Expecting [EXPR], found [" + tokens[this.currentToken][0] + "]");
                    }
                    else if(tokens[this.currentToken][1] == ')'){
                        this.parseOutput.push("VALID - Expecting [L_PAREN], found [)]");
                    }*/
                    else{
                        return;
                    }
                //}
            }

            public assignmentStatement(){
                console.log("AssiGNMENT RAN");
                this.parseOutput.push("AssignmentStatement");
            }
    }
}